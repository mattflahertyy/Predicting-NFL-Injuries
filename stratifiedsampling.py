# -*- coding: utf-8 -*-
"""StratifiedSampling.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MOtAiIXdFBlCjQB_qX5IgEAvWWn0hWF9
"""

import pandas as pd
import numpy as np

from google.colab import files
uploaded=files.upload()

df = pd.read_csv('player_injury_age_weather_cleaned (1).csv')
print(df)

df = df.drop('gsis_id', axis=1)
df=df.drop('Birthday', axis=1)
df=df.drop('first_name',axis=1)
df=df.drop('last_name', axis=1)
df=df.drop('full_name', axis=1)
df=df.drop('report_status', axis=1)
df=df.drop('game_type', axis=1)

df.to_csv('final_df_.csv', index=False)

print(df)

def replace_values(value):
    value = value.replace('achilles', 'ankle')
    value = value.replace('pectoral', 'chest')
    value= value.replace('collarbone', 'chest')
    value= value.replace('stinger', 'chest')
    value= value.replace('oblique', 'core')
    value= value.replace('arm', 'upper-arm')
    value= value.replace('elbow', 'upper-arm')
    value= value.replace('tricep', 'upper-arm')
    value= value.replace('bicep', 'upper-arm')
    return value

# Apply the custom function to the 'report_primary_injury' column
df['report_primary_injury'] = df['report_primary_injury'].apply(replace_values)

import matplotlib.pyplot as plt

columns_to_plot = ['report_primary_injury']

# Plot histograms for each column
for column in columns_to_plot:
    plt.figure(figsize=(8, 6))
    df[column].value_counts().sort_index().plot(kind='bar', color='skyblue')
    plt.title(f'Histogram for {column}')
    plt.xlabel(column)
    plt.ylabel('Count')
    plt.show()

def replace_values(value):
    value = value.replace('leg', 'upper-leg')
    value = value.replace('quad', 'upper-leg')
    value= value.replace('hamstring', 'upper-leg')
    value= value.replace('thigh', 'upper-leg')
    value= value.replace('calf', 'lower-leg')
    value= value.replace('shin', 'lower-leg')
    return value

# Apply the custom function to the 'report_primary_injury' column
df['report_primary_injury'] = df['report_primary_injury'].apply(replace_values)

columns_to_plot = ['report_primary_injury']

# Plot histograms for each column
for column in columns_to_plot:
    plt.figure(figsize=(8, 6))
    df[column].value_counts().sort_index().plot(kind='bar', color='skyblue')
    plt.title(f'Histogram for {column}')
    plt.xlabel(column)
    plt.ylabel('Count')
    plt.show()

def replace_values(value):
    value = value.replace('face', 'head')
    value = value.replace('glute', 'other')
    return value

# Apply the custom function to the 'report_primary_injury' column
df['report_primary_injury'] = df['report_primary_injury'].apply(replace_values)

columns_to_plot = ['report_primary_injury']

# Plot histograms for each column
for column in columns_to_plot:
    plt.figure(figsize=(8, 6))
    df[column].value_counts().sort_index().plot(kind='bar', color='skyblue')
    plt.title(f'Histogram for {column}')
    plt.xlabel(column)
    plt.ylabel('Count')
    plt.show()

from sklearn.model_selection import StratifiedShuffleSplit


# Mapping injury types to broader categories
injury_type_mapping = {
    'ankle': 0,
    'back': 1,
    'chest': 2,
    'concussion': 3,
    'core':4,
    'foot':5,
    'groin':6,
    'hand':7,
    'head':8,
    "hip":9,
    'knee':10,
    'lower-leg':11,
    'neck':12,
    'other':13,
    'rib':14,
    'shoulder':15,
    'upper-arm':16,
    'upper-leg':17,
    'wrist':18,
    # Add more mappings as needed based on your data
}

# Create the numeric injury categories
df["numeric_injury_category"] = df["report_primary_injury"].map(injury_type_mapping)

# Perform stratified sampling based on multiple features
split = StratifiedShuffleSplit(n_splits=1, test_size=0.2, random_state=42)

# Pass a list of arrays for the features you want to consider
for train_index, test_index in split.split(df, df["numeric_injury_category"]):
    strat_train_set = df.loc[train_index]
    strat_test_set = df.loc[test_index]

# Drop the temporary 'numeric_injury_category' column if you don't need it
strat_train_set = strat_train_set.drop(["numeric_injury_category"], axis=1)
strat_test_set = strat_test_set.drop(["numeric_injury_category"], axis=1)

print(df)

# Save the stratified training set to a CSV file
strat_train_set.to_csv('stratified_train_set.csv', index=False)

# Save the stratified testing set to a CSV file
strat_test_set.to_csv('stratified_test_set.csv', index=False)

print(strat_test_set)

print(strat_train_set)